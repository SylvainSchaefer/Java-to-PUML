@startuml
'https://plantuml.com/class-diagram
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

Class western.Boisson{

+ <<create>> Boisson(nom: String, genre: Genre)

+ getNom(): String
+ getGenre(): Genre
+ getNomAvecArticleIndefini(): String
+ getNomAvecArticlePartitif(): String
+ getNomAvecArticleDefini(): String
+ getNomAvecPreposition(preposition: String): String

}
western.Boisson -- western.Substantif
western.Boisson -- western.Boisson


Class western.Brigand{
- recompense: int
- estLibre: boolean

+ <<create>> Brigand(nom: String)
+ <<create>> Brigand(nom: String, boisson: Boisson)
+ <<create>> Brigand(nom: String, boisson: Boisson, look: String)

+ getLook(): String
+ getRecompense(): ()int
+ estLibre(): ()boolean
+ kidnapper(dame: Dame)
+ seFaireCapturer(cowBoy: Cowboy)
+ seFaireTirerDessus(cowBoy: Cowboy)
+ getPseudo(): String
+ getCaptives(): Dame[*]
+ sePresenter()
{static} + getBoissonParDefaut(): Boisson
{static} + setBoissonParDefaut(boisson: Boisson)

}
western.Brigand - western.Dame
western.Brigand -- western.Cowboy
western.Brigand -- western.Boisson

western.Brigand ---|> western.Personnage
Class western.CasDeTestStandard{

+ <<create>> CasDeTestStandard()

{static} + beforeAll()
+ beforeEach()
+ testMethod1()
+ testMethod2()
+ testMethod3()
+ testMethod4()
+ testMethod5()
+ afterEach()
{static} + afterAll()

}


Class western.Cowboy{
- gains: int

+ <<create>> Cowboy(nom: String)
+ <<create>> Cowboy(nom: String, boisson: Boisson)

+ getPseudo(): String
+ liberer(dame: Dame)
+ liberer(captives: Dame[*])
+ capturer(horsLaLoi: HorsLaLoi)
+ tirerSur(brigand: HorsLaLoi)
+ sePresenter()
{static} + getBoissonParDefaut(): Boisson
{static} + setBoissonParDefaut(boisson: Boisson)

}
western.Cowboy - western.HorsLaLoi
western.Cowboy -- western.Boisson

western.Cowboy ---|> western.Personnage
Class western.Dame{
- estLibre: boolean

+ <<create>> Dame(nom: String)
+ <<create>> Dame(nom: String, boisson: Boisson)

+ getPseudo(): String
+ seFaireKidnapper(horsLaLoi: HorsLaLoi)
+ seFaireLiberer(cowBoy: Cowboy)
+ estLibre(): ()boolean
+ sePresenter()
{static} + getBoissonParDefaut(): Boisson
{static} + setBoissonParDefaut(boisson: Boisson)
+ getRavisseur(): HorsLaLoi

}
western.Dame -- western.Cowboy
western.Dame -- western.HorsLaLoi
western.Dame -- western.Boisson

western.Dame ---|> western.Personnage
Enum western.Genre<<enum>> {
FEMININ
MASCULIN

}
Class western.Histoire4{

+ <<create>> Histoire4()

{static} + main(args: String[])

}


Interface western.HorsLaLoi<<interface>> {
}
Class western.Narrateur{

+ <<create>> Narrateur()
+ <<create>> Narrateur(nom: String)

+ dire(texte: String)
+ boire(boisson: Boisson)
+ boire()
+ getPseudo(): String

}

western.Narrateur ---|> western.Personnage
Interface western.Nommable<<interface>> {
}
Class western.Personnage{

+ <<create>> Personnage(nom: String)
+ <<create>> Personnage(nom: String, boisson: Boisson)

+ dire(texte: String)
+ sePresenter()
+ boire(boisson: Boisson)
+ boire()
+ getNom(): String
+ getBoisson(): Boisson
{static} + getPseudos(personnages: Nommable[*]): String
{static} + getBoissonParDefaut(): Boisson

}
western.Personnage -- western.Boisson
western.Personnage -- western.Boisson


Class western.Ripou{

+ <<create>> Ripou(nom: String)
+ <<create>> Ripou(nom: String, boisson: Boisson)
+ <<create>> Ripou(nom: String, boisson: Boisson, look: String)

+ getLook(): String
+ estLibre(): ()boolean
+ getRecompense(): ()int
+ kidnapper(dame: Dame)
+ getCaptives(): Dame[*]
+ seFaireCapturer(cowBoy: Cowboy)
+ seFaireTirerDessus(cowBoy: Cowboy)
+ getPseudo(): String
+ sePresenter()
+ liberer(dame: Dame)

}
western.Ripou -- western.Brigand

western.Ripou ---|> western.Cowboy
Class western.Substantif{

+ <<create>> Substantif(nom: String, genre: Genre)

+ getNom(): String
+ getGenre(): Genre
+ toString(): String
{static} + isVowel(c: char): (char)boolean
{static} + startsWithVowel(s: String): String)boolean
+ getArticleIndefini(): String
+ avecArticleIndefini(): String
{static} + getArticleDefini(genre: Genre): String
+ getArticleDefini(): String
+ avecArticleDefini(): String
{static} + faireElision(article: String): String
+ elision(): ()boolean
+ getArticlePartitif(): String
+ avecArticlePartitif(): String
+ avecElision(article: String): String
+ avecPreposition(preposition: String): String

}
western.Substantif -- western.Genre


Class western.test{

+ <<create>> test()


}



@enduml

